# -*- coding: utf-8 -*-
"""Housepriceprediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ASltQH08tyR-LKSpHBfkO8M4OdarijEK
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

print("Shape of train: ", train.shape)
print("Shape of test: ", test.shape)

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

train.head(10)

test.head(10)

#data integration

df=pd.concat([train, test], axis=0)
print(df.shape)

df.info()

null_val=df.isnull().sum()/df.shape[0]*100 # Calculate percentage of null values for each column
drop_var=null_val[null_val>50].keys() # Get the names of columns with more than 50% null values
drop_var

int_features=df.select_dtypes(include=['int64']).columns
print(int_features.shape[0])
int_features.tolist()

float_features=df.select_dtypes(include=['float64']).columns
print(float_features.shape[0])
float_features.tolist()

categorical_features=df.select_dtypes(include=['object']).columns
print(categorical_features.shape[0])
categorical_features.tolist()

"""Get Statical info of numerical feature"""

df.describe()

df.describe().shape

"""Handling missing value"""

plt.figure(figsize=(16,9))
sns.heatmap(df.isnull())

df.set_index("Id")

missing_val_features=null_val[null_val>0]
len(missing_val_features)

missing_val_features

cat_na_features=missing_val_features[missing_val_features.keys().isin(categorical_features)]
len(cat_na_features)
cat_na_features

int_na_features=missing_val_features[missing_val_features.keys().isin(int_features)]
int_na_features

float_na_features=missing_val_features[missing_val_features.keys().isin(float_features)]
len(float_na_features)
float_na_features

df["MSZoning"].value_counts()

sns.countplot(df["MSZoning"])

df_copy=df.copy()

mszoning_mode=df["MSZoning"].mode()[0]
df_copy["MSZoning"].replace(np.nan, mszoning_mode, inplace=True)

df_copy["MSZoning"].isnull().sum()

#handling alley
alley_cont="NA"
df_copy["Alley"].replace(np.nan,alley_cont, inplace=True)
df_copy["Alley"].isnull().sum()

#handling lotfrontage

def boxHistPlot(df,figsize=(16,5)):
  plt.figure(figsize=figsize)
  plt.subplot(1,2,1)
  sns.boxplot(df)
  plt.subplot(1,2,2)
  sns.distplot(df)

boxHistPlot(df_copy["LotFrontage"])

lotfrontage_median=df["LotFrontage"].median()
df_copy["LotFrontage"].replace(np.nan, lotfrontage_median, inplace=True)
df_copy["LotFrontage"].isnull().sum()

def oldnewboxplot(df,df_new,feature):
  plt.figure(figsize=(16,5))
  plt.subplot(2,2,1) # Changed to a 2x2 grid
  sns.boxplot(df[feature])
  plt.subplot(2,2,2)
  sns.distplot(df[feature])
  plt.subplot(2,2,3)
  sns.boxplot(df_new[feature])
  plt.subplot(2,2,4)
  sns.distplot(df_new[feature])
  plt.show()

oldnewboxplot(df,df_copy,"LotFrontage")

#handling utility
df["Utilities"].value_counts()

df_copy["Utilities"].isnull().sum()

utility_mode=df["Utilities"].mode()[0]
df_copy["Utilities"].replace(np.nan, utility_mode, inplace=True)
df_copy["Utilities"].isnull().sum()
df_copy

df_copy["Utilities"].isnull().sum()

#handling Exterior1st and Exterior2nd

df["Exterior1st"].value_counts()

df["Exterior2nd"].value_counts()

Exterior1st_mode=df["Exterior1st"].mode()[0]
df_copy["Exterior1st"].replace(np.nan, Exterior1st_mode, inplace=True)
print(df_copy["Exterior1st"].isnull().sum())
Exterior2nd_mode=df["Exterior2nd"].mode()[0]
df_copy["Exterior2nd"].replace(np.nan, Exterior2nd_mode, inplace=True)
print(df_copy["Exterior2nd"].isnull().sum())

## Handling MasVnrType and MasVnrArea

sns.heatmap(df[["MasVnrType", "MasVnrArea"]].isnull())

df["MasVnrType"].value_counts()

masvnrtype_nan="None"
df_copy["MasVnrType"].replace(np.nan, masvnrtype_nan, inplace=True)
print(df_copy["MasVnrType"].isnull().sum())
masvnrarea_nan=0
df_copy["MasVnrArea"].replace(np.nan, masvnrarea_nan, inplace=True)
print(df_copy["MasVnrArea"].isnull().sum())

#handling bsmt feature
#float features
#BsmtFinSF1	0.034258
#BsmtFinSF2	0.034258
#BsmtUnfSF	0.034258
#TotalBsmtSF	0.034258
#BsmtFullBath	0.068517
#BsmtHalfBath	0.068517
#cat features
#BsmtQual	2.774923
#BsmtCond	2.809181
#BsmtExposure	2.809181
#BsmtFinType1	2.706406
#BsmtFinType2	2.740665

float_bsmt_f=["BsmtFinSF1","BsmtFinSF2","BsmtUnfSF","TotalBsmtSF","BsmtFullBath","BsmtHalfBath"];
cat_bsmt_f=["BsmtQual","BsmtCond","BsmtExposure","BsmtFinType1","BsmtFinType2"];

sns.heatmap(df[cat_bsmt_f].isnull())

for feature in cat_bsmt_f:
  print(f"value count of {feature} is {df[feature].value_counts()}")

bsmt_cont="NA"
for feature in cat_bsmt_f:
  df_copy[feature].replace(np.nan, bsmt_cont, inplace=True)

df_copy[cat_bsmt_f].isnull().sum()

sns.heatmap(df[float_bsmt_f].isnull())

float_bsmt_cont=0
for feature in float_bsmt_f:
  df_copy[feature].replace(np.nan, float_bsmt_cont,inplace=True)

df_copy[float_bsmt_f].isnull().sum()

#handling KitchenQual and Electrical

df["KitchenQual"].value_counts()

df["Electrical"].value_counts()

df_copy["KitchenQual"].isnull().sum()

df_copy["Electrical"].isnull().sum()

kitchenqual_mode=df["KitchenQual"].mode()[0]
df_copy["KitchenQual"].replace(np.nan, kitchenqual_mode, inplace=True)
print(df_copy["KitchenQual"].isnull().sum())

electrical_mode=df["Electrical"].mode()[0]
df_copy["Electrical"].replace(np.nan, electrical_mode, inplace=True)
print(df_copy["Electrical"].isnull().sum())

"""Handling other categorical features"""

#Functional	0.068517 mode
#FireplaceQu	48.646797 NA
#PoolQC	99.657417 NA
#Fence	80.438506 NA
#MiscFeature	96.402878 NA
#SaleType mode

df["Functional"].value_counts()

df["SaleType"].value_counts()

functional_mode=df["Functional"].mode()[0]
df_copy["Functional"].replace(np.nan, functional_mode, inplace=True)
print(df_copy["Functional"].isnull().sum())

saletype_mode=df["SaleType"].mode()[0]
df_copy["SaleType"].replace(np.nan, saletype_mode, inplace=True)
print(df_copy["SaleType"].isnull().sum())

other_cat_f=["FireplaceQu",
"PoolQC"	,
"Fence"	,
"MiscFeature"]

for i in other_cat_f:
  df_copy[i].replace(np.nan, "NA", inplace=True)

for i in other_cat_f:
  print(df_copy[i].isnull().sum())

"""Handling garage features"""

#GarageType	5.378554 NA
#GarageFinish	5.447071 NA
#GarageQual	5.447071 NA
#GarageCond	5.447071 NA

#GarageYrBlt	5.447071 0
#GarageCars	0.034258 0
#GarageArea	0.034258 0

cat_garage_f=["GarageType",
"GarageFinish",
"GarageQual",
"GarageCond"]
num_garage_f=["GarageArea",
"GarageCars",
"GarageYrBlt"]

for i in cat_garage_f:
  df_copy[i].replace(np.nan, "NA", inplace=True)
  print(df_copy[i].isnull().sum())

for i in num_garage_f:
  df_copy[i].replace(np.nan, 0, inplace=True)
  print(df_copy[i].isnull().sum())

df_copy.isnull().sum()

#feature transformation

feat_for_num_conv=["MSSubClass","YearBuilt","YearRemodAdd","GarageYrBlt","MoSold","YrSold"]
for i in feat_for_num_conv:
  print(df_copy[i].dtype)

import calendar

df_copy["MoSold"].unique()

df_copy["MoSold"]=df_copy["MoSold"].apply(lambda x: calendar.month_name[x])
df_copy["MoSold"].unique()

for i in feat_for_num_conv:
  df_copy[i]=df_copy[i].astype(str)

for i in feat_for_num_conv:
  print(df_copy[i].dtype)

#convert categorical feature to num feature

ordinal_feature=["ExterQual",
                  "ExterCond",
                  "BsmtQual",
                  "BsmtCond",
                  "BsmtExposure",
                  "BsmtFinSF1",
                  "BsmtFinType1",
                  "BsmtFinType2",
                  "HeatingQC",
                  "KitchenQual",
                  "FireplaceQu",
                  "GarageQual",
                  "GarageCond",
                  "PoolQC",
                  "Functional",
                  "GarageFinish",
                  "PavedDrive",
                  "Utilities"]
print(len(ordinal_feature))

from pandas.api.types import CategoricalDtype

df_copy["ExterQual"].unique()

df_copy["ExterQual"]=df_copy["ExterQual"].astype(CategoricalDtype(categories=["Po","Fa","TA","Gd","Ex"], ordered=True)).cat.codes

df_copy["BsmtExposure"].value_counts()

df_copy["BsmtExposure"]=df_copy["BsmtExposure"].astype(CategoricalDtype(categories=["NA","No","Mn","Av","Gd"], ordered=True)).cat.codes

df_copy["BsmtExposure"].value_counts()

#BsmtCond
#FireplaceQu
#PoolQC

df_copy['BsmtFinType1'] = df_copy['BsmtFinType1'].astype(CategoricalDtype(categories=['NA', 'Unf', 'LwQ', 'Rec', 'BLQ','ALQ', 'GLQ'], ordered = True)).cat.codes
df_copy['BsmtFinType2'] = df_copy['BsmtFinType2'].astype(CategoricalDtype(categories=['NA', 'Unf', 'LwQ', 'Rec', 'BLQ','ALQ', 'GLQ'], ordered = True)).cat.codes
df_copy['BsmtQual'] = df_copy['BsmtQual'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes
df_copy['ExterCond'] = df_copy['ExterCond'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes
df_copy['Functional'] = df_copy['Functional'].astype(CategoricalDtype(categories=['Sal', 'Sev', 'Maj2', 'Maj1', 'Mod','Min2','Min1', 'Typ'], ordered = True)).cat.codes
df_copy['GarageCond'] = df_copy['GarageCond'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes
df_copy['GarageQual'] = df_copy['GarageQual'].astype(CategoricalDtype(categories=['NA', 'Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes
df_copy['GarageFinish'] = df_copy['GarageFinish'].astype(CategoricalDtype(categories=['NA', 'Unf', 'RFn', 'Fin'], ordered = True)).cat.codes
df_copy['HeatingQC'] = df_copy['HeatingQC'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes
df_copy['KitchenQual'] = df_copy['KitchenQual'].astype(CategoricalDtype(categories=['Po', 'Fa', 'TA', 'Gd', 'Ex'], ordered = True)).cat.codes
df_copy['PavedDrive'] = df_copy['PavedDrive'].astype(CategoricalDtype(categories=['N', 'P', 'Y'], ordered = True)).cat.codes
df_copy['Utilities'] = df_copy['Utilities'].astype(CategoricalDtype(categories=['ELO', 'NASeWa', 'NASeWr', 'AllPub'], ordered = True)).cat.codes

df_copy["BsmtCond"]=df_copy["BsmtCond"].astype(CategoricalDtype(categories=["NA","Po","Fa","TA","Gd","Ex"], ordered=True)).cat.codes

df_copy["FireplaceQu"]=df_copy["FireplaceQu"].astype(CategoricalDtype(categories=["NA","Po","Fa","TA","Gd","Ex"], ordered=True)).cat.codes

df_copy["PoolQC"]=df_copy["PoolQC"].astype(CategoricalDtype(categories=["NA","Fa","TA","Gd","Ex"], ordered=True)).cat.codes

df_copy.info()

"""One hot encoding"""

df_encod=df_copy.copy()

df_encod.select_dtypes(include=['object']).columns
print(len(df_encod.select_dtypes(include=['object']).columns))

object_f=df_encod.select_dtypes(include=['object']).columns.tolist()
object_f

print(df_encod.shape)
df_encod=pd.get_dummies(df_encod, columns=object_f,prefix=object_f,drop_first=True)
print(df_encod.shape)

df_encod.select_dtypes(include=['object']).columns.tolist()

"""Splitting data for training and testing"""

df_encod.shape

len_train=train.shape[0]
len_train

X_train=df_encod[:len_train].drop("SalePrice",axis=1)
Y_train=df_encod["SalePrice"][:len_train]
X_test=df_encod[len_train:].drop("SalePrice",axis=1)
print(X_train.shape)
print(Y_train.shape)
print(X_test.shape)

"""Feature Scaling"""

from sklearn.preprocessing import StandardScaler

sc=StandardScaler()
sc.fit(X_train)
X_train=sc.transform(X_train)
X_test=sc.transform(X_test)

"""ML Model Training"""

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import SGDRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.gaussian_process import GaussianProcessRegressor
from sklearn.metrics import r2_score
from sklearn.neural_network import MLPRegressor
from xgboost import XGBRegressor
from sklearn.isotonic import IsotonicRegression

svr=SVR()
lr=LinearRegression()
sgd=SGDRegressor()
dt=DecisionTreeRegressor()
rf=RandomForestRegressor()
gb=GradientBoostingRegressor()
knn=KNeighborsRegressor()
gpr=GaussianProcessRegressor()
mlpr=MLPRegressor()

svr=SVR()
lr=LinearRegression()
sgd=SGDRegressor()
dt=DecisionTreeRegressor()
rf=RandomForestRegressor()
gb=GradientBoostingRegressor()
knn=KNeighborsRegressor()
gpr=GaussianProcessRegressor()
mlpr=MLPRegressor()

models={"a":["LinearRegression",lr],
        "b":["SGDRegressor",sgd],
        "c":["DecisionTreeRegressor",dt],
        "d":["RandomForestRegressor",rf],
        "e":["GradientBoostingRegressor",gb],
        "f":["KNeighborsRegressor",knn],
        "g":["GaussianProcessRegressor",gpr],
        "h":["MLPRegressor",mlpr],
        "i":["SVR",svr]}

from sklearn.model_selection import KFold, cross_val_score
from sklearn.metrics import make_scorer, r2_score

def test_model(model, X_train=X_train, Y_train=Y_train):
    cv = KFold(n_splits = 3, shuffle=True, random_state = 45)
    r2 = make_scorer(r2_score)
    r2_val_score = cross_val_score(model, X_train, Y_train, cv=cv, scoring = r2)
    score = [r2_val_score.mean()]
    return score

models_score=[]
for model in models:
  print("Trainnig Model :",models[model][0])
  score=test_model(models[model][1],X_train,Y_train)
  print("Score of Model :",score)
  models_score.append([models[model][0],score])

"""Final Scores of each Model"""

models_score